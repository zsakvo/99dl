#!/usr/bin/env node
require("colors");
var SocksProxyAgent = require("socks-proxy-agent");
var dl = require("..");
var getCatalog = require("../dl/getCatalog");
var getTxt = require("../dl/getTxt");
var getEpub = require("../dl/getEpub");
var program = require("commander");
var readline = require("readline-sync");
const pkg = require("../package.json");

program
  .usage("<options> [value]")
  .option("-d, --download <bid(s)>", "download books by bookID")
  .option("-s, --setting", "open options menu")
  .version(pkg.version, "-v, --version")
  .parse(process.argv);

let config = dl.getConfig();
var reg = new RegExp("^[0-9]*$");

async function handleArgv() {
  if (program.download) {
    var downloadType;
    let bid;
    if (
      program.download.split(",")[0] === "epub" ||
      program.download.split(",")[0] === "txt"
    ) {
      downloadType = program.download.split(",")[0];
      bid = program.download.split(",")[1];
    } else {
      downloadType = config.download.downloadType;
      bid = program.download.split(",")[0];
    }
    if (!reg.test(bid)) {
      console.log("\nYour book ID is incorrect!\n".red);
      return;
    }
    if (config.download.dlDir == null) {
      console.log("\nYou must set the download path first!".red);
      console.log("\tTry" + " 99dl -s".yellow + " to set it.\n");
      return;
    }
    var opt = {};
    opt["timeout"] = config.download.timeout;
    if (config.download.proxy != null) {
      var proxy = config.download.proxy;
      if (proxy.includes("http://")) {
        opt["proxy"] = proxy;
      } else if (proxy.includes("socks://")) {
        var agent = new SocksProxyAgent(proxy);
        opt["agent"] = agent;
      }
    }

    var catalog = await getCatalog(bid, opt);
    if (catalog == null) {
      console.log("\nDownload failed, because the catalog is empty!\n".red);
      process.exit();
    } else {
      if (downloadType === "txt") {
        getTxt(catalog, opt, config.download);
      } else {
        getEpub(catalog, opt, config.download);
      }
    }
  } else if (program.setting) {
    let index;
    do {
      console.clear();
      console.log("99dl Settings".green);
      let settings = [
        "Download path\t".yellow +
          (config.download.dlDir
            ? config.download.dlDir
            : "Null, please set one".bgRed),
        "Download thread\t".yellow + config.download.thread,
        "Download timeout\t".yellow + config.download.timeout,
        "Proxy\t\t".yellow +
          (typeof config.download.proxy == "string" &&
          config.download.proxy.length > 0
            ? config.download.proxy
            : "Disable"),
      ];
      index = readline.keyInSelect(settings, "Press a key:", {
        cancel: "Exit".bgMagenta,
      });
      console.log();

      switch (index) {
        case 0:
          config.download.dlDir = readline.questionPath(
            "Please input a download path:\n".yellow,
            {
              isDirectory: true,
              exists: null,
              cd: false,
            }
          );
          break;

        case 1:
          config.download.thread = getStrictIntInput(
            "Please input the number of download thread:".yellow +
              " [1-10, default is 3]\n",
            {
              defaultInput: 3,
            },
            (input) => input >= 1 && input <= 10,
            "It must be between 1 and 10."
          );
          break;

        case 2: // 下载超时
          config.download.timeout = getStrictIntInput(
            "Please input the millisecond of download timeout:".yellow +
              " [default is 3000]\n",
            {
              defaultInput: 3000,
            },
            (input) => input > 1000,
            "It should be greater than 1000."
          );
          break;

        case 3: // 代理设置
          config.download.proxy = readline.question(
            "Please input your HTTP/SOCKS proxy like:\n".yellow +
              "  <Protocol>://[user:passwd@]<IP>:<Port>\n" +
              "Such as\n".yellow +
              "  http://127.0.0.1:1080\n" +
              "  socks://user:passwd@127.0.0.1:1080\n" +
              "If you want to DISABLE it, just input nothing.\n".yellow,
            {
              limitMessage: "\nIncorrect format, please re-input.\n".bgRed,
              limit: /(^(http|socks):\/\/(.+@)?((25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d)))\.){3}(25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d))):(([1-9]\d{0,3})|([1-5]\d{4})|(6[0-4]\d{3})|(65[0-4]\d{2})|(655[0-2]\d)|(6553[0-5]))$)|(^$)/,
            }
          );
          break;
      }
      dl.writeConfig(config);
    } while (index !== -1);
    console.log("Exit\n".green);
  } else {
    console.error("\nMissing arguments!".red);
    program.outputHelp();
  }
}

function getStrictIntInput(question, option, limit, limitReply) {
  let result = readline.questionInt(question, option);
  while (!limit(result)) {
    console.log("\n" + limitReply.bgRed + "\n");
    result = readline.questionInt(question, option);
  }
  return result;
}

handleArgv();
